<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.kh.project.common.board.model.dao.BoardMapper">

	<resultMap type="Board" id="board_rm">

	<id property="boardNo" column="BOARD_NO" />

	<result property="boardTitle" column="BOARD_TITLE" />
	<result property="boardContent" column="BOARD_CONTENT" />
	<result property="boardCreateDate" column="B_CREATE_DATE" />
	<result property="boardUpdateDate" column="B_UPDATE_DATE" />
	<result property="readCount" column="READ_COUNT" />
	<result property="commentCount" column="COMMENT_COUNT" />
	<result property="likeCount" column="LIKE_COUNT" />
	<result property="memberNickname" column="MEMBER_NICKNAME" />
	<result property="memberNo" column="MEMBER_NO" />
	<result property="profileImage" column="PROFILE_IMG" />
	<result property="thumbnail" column="THUMBNAIL" />


	<!-- collection 태그
		
			select로 조회된 결과를 컬렉션(list)에 담아서 지정된 필드에 세팅
			
			property -> DTO의 필드명
			select -> 실행할 select문의 아이디 값 
		 	column -> 조회 결과 중 지정된 컬럼의 값을 파라미터로 전달
		 	javaType -> java에서 실제 타입을 지정
		 	ofType -> 제네릭
		 -->
	<collection property="imageList"
		select="selectImageList"
		column="BOARD_NO"
		javaType="java.util.ArrayList"
		ofType="BoardImage"
	/>
	<collection property="commentList"
		select="selectCommentList"
		column="BOARD_NO"
		javaType="java.util.ArrayList"
		ofType="Comment"
	/>
	</resultMap>
	
	<select id="getListCount" resultType="_int">
		SELECT COUNT(*)
		FROM "BOARD"
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
	</select>

	<select id="selectBoardTypeList" resultType="map">
		SELECT *
		FROM "BOARD_TYPE"
		ORDER BY '1'
	</select>
	
	<resultMap type="BoardImage" id="boardImage_rm">
	
		<id property="imageNo" column="IMG_NO"/>
		
		<result property="imagePath" column="IMG_PATH"/>
		<result property="imageReName" column="IMG_RENAME"/>
		<result property="imageOriginal" column="IMG_ORIGINAL"/>
		<result property="imageOrder" column="IMG_ORDER"/>
		<result property="boardNo" column="BOARD_NO"/>
	</resultMap>
	
	
	<!-- Comment resultMap -->
	<resultMap type="Comment" id="comment_rm">
	
		<id property="commentNo" column="COMMENT_NO"/>
		
		<result property="commentContent" column="COMMENT_CONTENT"/>
		<result property="commentCreateDate" column="C_CREATE_DATE"/>
		<result property="boardNo" column="BOARD_NO"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="commentDeleteFlag" column="COMMENT_DEL_FL"/>
		<result property="parentNo" column="PARENT_NO"/>
		<result property="memberNickname" column="MEMBER_NICKNAME"/>
		<result property="profileImage" column="PROFILE_IMG"/>
	</resultMap>
	
	<select id="getSearchListCount" resultType="_int">
		SELECT COUNT(*)
		FROM "BOARD"
		<if test='key == "w"'>
			JOIN "MEMBER" USING(MEMBER_NO)
		</if>
		
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		<choose>
			
			<when test='key == "t"'>
				AND BOARD_TITLE LIKE '%${query}%'
			</when>
			
			<when test='key == "c"'>
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
			
			<when test='key == "tc"'>
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
			</when>
	
			<when test='key == "w"'>
				AND MEMBER_NICKNAME LIKE '%${query}%'
			</when>		
			
		</choose>
	</select>
	
 	<select id="selectBoardList" resultMap="board_rm">
	SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT,
	<!-- CDATA[ 내용 ] : 내용 안은 모두 문자열 취급  -->
	<![CDATA[ 
	CASE
		WHEN SYSDATE - B_CREATE_DATE < 1/24/60
		THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60 * 60 ) || '초 전'
		WHEN SYSDATE - B_CREATE_DATE < 1/24
		THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60) || '분 전'
		WHEN SYSDATE - B_CREATE_DATE < 1
		THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24) || '시간 전'
		ELSE TO_CHAR(B_CREATE_DATE, 'YYYY-MM-DD')
	END B_CREATE_DATE,
	]]>
		(SELECT COUNT(*) FROM "COMMENT" C
		 WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,
		(SELECT COUNT(*) FROM BOARD_LIKE L
		 WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
		(SELECT IMG_PATH || IMG_RENAME FROM BOARD_IMG I
	WHERE I.BOARD_NO = B.BOARD_NO
	AND IMG_ORDER = 0) THUMBNAIL
	FROM "BOARD" B
	JOIN "MEMBER" USING(MEMBER_NO)
	WHERE BOARD_DEL_FL = 'N'
	AND BOARD_CODE = #{boardCode}
	ORDER BY BOARD_NO DESC
	</select>
	
	<select id="selectSearchBoardList" resultMap="board_rm">
	SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT,
	<!-- CDATA[ 내용 ] : 내용 안은 모두 문자열 취급  -->
	<![CDATA[ 
	CASE
		WHEN SYSDATE - B_CREATE_DATE < 1/24/60
		THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60 * 60 ) || '초 전'
		WHEN SYSDATE - B_CREATE_DATE < 1/24
		THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60) || '분 전'
		WHEN SYSDATE - B_CREATE_DATE < 1
		THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24) || '시간 전'
		ELSE TO_CHAR(B_CREATE_DATE, 'YYYY-MM-DD')
	END B_CREATE_DATE,
	]]>
		(SELECT COUNT(*) FROM "COMMENT" C
		 WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,
		(SELECT COUNT(*) FROM BOARD_LIKE L
		 WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
		(SELECT IMG_PATH || IMG_RENAME FROM BOARD_IMG I
	WHERE I.BOARD_NO = B.BOARD_NO
	AND IMG_ORDER = 0) THUMBNAIL
	FROM "BOARD" B
	JOIN "MEMBER" USING(MEMBER_NO)
	WHERE BOARD_DEL_FL = 'N'
	AND BOARD_CODE = #{boardCode}
	
		<choose>
		
		<when test='key == "t"'>
			AND BOARD_TITLE LIKE '%${query}%'
		</when>
		
		<when test='key == "c"'>
			AND BOARD_CONTENT LIKE '%${query}%'
		</when>
		
		<when test='key == "tc"'>
			AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
		</when>

		<when test='key == "w"'>
			AND MEMBER_NICKNAME LIKE '%${query}%'
		</when>		
			
		</choose>
	
	ORDER BY BOARD_NO DESC
	</select>
	
	
	<select id="selectBoard" resultMap="board_rm">
		SELECT BOARD_NO, BOARD_TITLE, BOARD_CONTENT, BOARD_CODE,
			READ_COUNT, MEMBER_NICKNAME, MEMBER_NO, PROFILE_IMG,
			TO_CHAR(B_CREATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') B_CREATE_DATE,
			TO_CHAR(B_UPDATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') B_UPDATE_DATE,
			(SELECT COUNT(*)
		FROM "BOARD_LIKE" L
		WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT
		FROM "BOARD" B
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		AND BOARD_NO = #{boardNo}
	</select>
	
	<select id="selectImageList" resultMap="boardImage_rm">
		SELECT * FROM BOARD_IMG 
		WHERE BOARD_NO = #{boardNo}
		ORDER BY IMG_ORDER
	</select>

	<select id="selectCommentList" resultMap="comment_rm">
		SELECT C.* FROM
			(SELECT COMMENT_NO, COMMENT_CONTENT,
			TO_CHAR(C_CREATE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') C_CREATE_DATE,
			BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG, PARENT_NO, COMMENT_DEL_FL
			FROM "COMMENT"
			JOIN MEMBER USING(MEMBER_NO)
			WHERE BOARD_NO = #{boardNo}) C
		WHERE COMMENT_DEL_FL = 'N'
		START WITH PARENT_NO IS NULL
		CONNECT BY PRIOR COMMENT_NO = PARENT_NO
		ORDER SIBLINGS BY COMMENT_NO
	</select>

	<select id="selectLike" resultType="_int">
		SELECT COUNT(*) FROM BOARD_LIKE 
		WHERE MEMBER_NO = #{memberNo}
		AND BOARD_NO = #{boardNo}
	</select>

	<update id="updateReadCount">
		UPDATE "BOARD" SET
		READ_COUNT = READ_COUNT + 1  
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<insert id="insertBoardLike">
		INSERT INTO BOARD_LIKE
		VALUES(#{boardNo}, #{memberNo})
	</insert>
	
	<delete id="deletetBoardLike">
		DELETE FROM BOARD_LIKE
		WHERE BOARD_NO = #{boardNo}
		AND MEMBER_NO = #{memberNo}
	</delete>

	<select id="selectBoardLike" resultType="_int">
		SELECT COUNT(*) 
		FROM BOARD_LIKE
		WHERE BOARD_NO = #{boardNo}
	</select>
	
	<update id="boardDelete">
		UPDATE "BOARD" SET
		BOARD_DEL_FL = 'Y'
		WHERE BOARD_NO = #{boardNo}
		AND BOARD_CODE = #{boardCode}
	</update>
	
	<update id="deleteComment">
		UPDATE "COMMENT" SET
		COMMENT_DEL_FL = 'Y'
		WHERE COMMENT_NO = #{commentNo}
	</update>
	
	<insert id="insertComment">
		INSERT INTO "COMMENT"
		VALUES(SEQ_COMMENT_NO.NEXTVAL, #{comment}, DEFAULT, DEFAULT, #{boardNo}, #{memberNo}, 
		
		<if test="parentNo == 0"> Null </if>
		<if test="parentNo != 0"> #{parentNo} </if>
		
			   )
	</insert>
	
	<insert id="insert">
		INSERT INTO "COMMENT"
		VALUES(SEQ_COMMENT_NO.NEXTVAL, #{commentContent}, DEFAULT, DEFAULT, #{boardNo}, #{memberNo}, 
		
		<if test="parentNo == 0"> Null </if>
		<if test="parentNo != 0"> #{parentNo} </if>
		
			   )
	</insert>
	
	<update id="updateComment">
		UPDATE "COMMENT" SET
		COMMENT_CONTENT = #{commentContent}
		WHERE COMMENT_NO = #{commentNo}
	</update>
	


</mapper>
